settings {
	hostname = ${?HOSTNAME}
	ip		   = ${?HOST_IP} // original was localhost
	http 		 = 8080
	port 		 = 1600
	bport		 = 1600
}

akka {
	extensions = ["akka.cluster.pubsub.DistributedPubSub"]
	loglevel = "ERROR"
	stdout-loglevel = "ERROR"
	loggers = ["akka.event.slf4j.Slf4jLogger"]
	actor {
		provider = akka.cluster.ClusterActorRefProvider
		#prio-dispatcher {
		#	type = "Dispatcher"
		#	mailbox-type = "com.gwz.dockerexp.Actors.ClusterActors.PriorityMailbox"
		#}
	}
	remote {
		enabled-transports = ["akka.remote.netty.tcp"]
		netty.tcp {
			# Internal Docker
			bind-hostname = ${settings.ip} # This cannot be left as localhost/127.0.0.1!  Reset this value in code to internal IP.
			bind-port     = ${settings.bport}
			# External Docker addr
			hostname = ${settings.ip}
			port     = ${settings.port}
		}
	}

	failure-detector {

		# FQCN of the failure detector implementation.
		# It must implement akka.remote.FailureDetector and have
		# a public constructor with a com.typesafe.config.Config and
		# akka.actor.EventStream parameter.
		implementation-class = "akka.remote.PhiAccrualFailureDetector"

		# How often keep-alive heartbeat messages should be sent to each connection.
		heartbeat-interval = 1 s

		# Defines the failure detector threshold.
		# A low threshold is prone to generate many wrong suspicions but ensures
		# a quick detection in the event of a real crash. Conversely, a high
		# threshold generates fewer mistakes but needs more time to detect
		# actual crashes.
		threshold = 30

		# Number of the samples of inter-heartbeat arrival times to adaptively
		# calculate the failure timeout for connections.
		max-sample-size = 1000

		# Minimum standard deviation to use for the normal distribution in
		# AccrualFailureDetector. Too low standard deviation might result in
		# too much sensitivity for sudden, but normal, deviations in heartbeat
		# inter arrival times.
		min-std-deviation = 100 ms

		# Number of potentially lost/delayed heartbeats that will be
		# accepted before considering it to be an anomaly.
		# This margin is important to be able to survive sudden, occasional,
		# pauses in heartbeat arrivals, due to for example garbage collect or
		# network drop.
		acceptable-heartbeat-pause = 3 s

		# Number of member nodes that each member will send heartbeat messages to,
		# i.e. each node will be monitored by this number of other nodes.
		monitored-by-nr-of-members = 5

		# After the heartbeat request has been sent the first failure detection
		# will start after this period, even though no heartbeat message has
		# been received.
		expected-response-after = 1 s

	}



	cluster {
		seed-nodes = [
			# Set programatically (passed in on args list)
      # e.g.		"akka.tcp://ClusterSystem@127.0.0.1:2551"
		]
		auto-down-unreachable-after = 5s
	}
}

kamon {

	system-metrics {
		#sigar is enabled by default
		sigar-enabled = true

		#jmx related metrics are enabled by default
		jmx-enabled = true
	}

	util.filters {
		"akka.tracked-actor" {
			includes = ["dockerexp/user/**"],
			excludes = ["dockerexp/system/**"]
		}
	}

	prometheus {
		embedded-server {
			# Hostname and port used by the embedded web server to publish the scraping enpoint.
			hostname = 0.0.0.0
			port = 1${settings.port}
		}
		buckets {
			default-buckets = [
				10,
				30
			]

			# TODO
			time-buckets = [
				0.005,
				0.01,
				0.025,
				0.05,
				0.075,
				0.1,
				0.25,
				0.5,
				0.75,
				1,
				2.5,
				5,
				7.5,
				10
			]

			# TODO
			information-buckets = [
				512,
				1024,
				2048,
				4096,
				16384,
				65536,
				524288,
				1048576
			]
		}
	}
}